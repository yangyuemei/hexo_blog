[{"title":"bootstrap实现简单的tab页","date":"2017-03-21T07:15:16.000Z","path":"2017/03/21/bootstrap实现简单的tab页/","text":"1. 引入对应的css、js文件 123&lt;link rel=\"stylesheet\" href=\"https://cdn.static.runoob.com/libs/bootstrap/3.3.7/css/bootstrap.min.css\"&gt; &lt;script src=\"https://cdn.static.runoob.com/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.static.runoob.com/libs/bootstrap/3.3.7/js/bootstrap.min.js\"&gt;&lt;/script&gt; 2. 写一个ul,包含tab页标题 1234567891011&lt;ul id=\"myTab\" class=\"nav nav-tabs\"&gt; &lt;li class=\"active\"&gt;&lt;a href=\"#home\" data-toggle=\"tab\"&gt;菜鸟教程&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#ios\" data-toggle=\"tab\"&gt;iOS&lt;/a&gt;&lt;/li&gt; &lt;li class=\"dropdown\"&gt; &lt;a href=\"#\" id=\"myTabDrop1\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"&gt;Java &lt;b class=\"caret\"&gt;&lt;/b&gt;&lt;/a&gt; &lt;ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"myTabDrop1\"&gt; &lt;li&gt;&lt;a href=\"#jmeter\" tabindex=\"-1\" data-toggle=\"tab\"&gt;jmeter&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"#ejb\" tabindex=\"-1\" data-toggle=\"tab\"&gt;ejb&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 3. 每一个tab对应的内容页 1234567891011121314&lt;div id=\"myTabContent\" class=\"tab-content\"&gt; &lt;div class=\"tab-pane fade in active\" id=\"home\"&gt; &lt;p&gt;home&lt;/p&gt; &lt;/div&gt; &lt;div class=\"tab-pane fade\" id=\"ios\"&gt; &lt;p&gt;ios&lt;/p&gt; &lt;/div&gt; &lt;div class=\"tab-pane fade\" id=\"jmeter\"&gt; &lt;p&gt;jmeter&lt;/p&gt; &lt;/div&gt; &lt;div class=\"tab-pane fade\" id=\"ejb\"&gt; &lt;p&gt;ejb&lt;/p&gt; &lt;/div&gt;&lt;/div&gt; 4. tab页点击之后的状态 123456789101112&lt;script&gt;$(function()&#123; $('a[data-toggle=\"tab\"]').on('shown.bs.tab', function (e) &#123; // 获取已激活的标签页的名称 var activeTab = $(e.target).text(); // 获取前一个激活的标签页的名称 var previousTab = $(e.relatedTarget).text(); $(\".active-tab span\").html(activeTab); $(\".previous-tab span\").html(previousTab); &#125;);&#125;);&lt;/script&gt; ​","tags":[{"name":"bootstrap","slug":"bootstrap","permalink":"yangyuemei.coding.me/tags/bootstrap/"}]},{"title":"渐进增强和优雅降级的区别","date":"2017-03-21T06:57:34.000Z","path":"2017/03/21/渐进增强和优雅降级的区别/","text":"定义 渐进增强（progressive enhancement): 一开始只构建站点的最少特性，然后不断针对各浏览器追加功能 优雅降级（graceful degradation): 一开始就构建站点的完整功能，然后针对浏览器测试和修复 都关注于同一网站在不同设备里不同浏览器下的表现程度 区别 “渐进增强” 观点则认为应关注于内容本身。请注意其中的差别：我甚至连“浏览器”三个字都没提。 “优雅降级”观点认为应该针对那些最高级、最完善的浏览器来设计网站. 而将那些被认为“过时”或有功能缺失的浏览器下的测试工作安排在开发周期的最后阶段，并把测试对象限定为主流浏览器（如 IE、Mozilla 等）的前一个版本。 理解 “渐进增强”则是从浏览器支持的基本功能开始, 首先为所有设备准备好清晰且语义化的html及完整内容, 然后再以无侵入的方法向页面增加无害于基础浏览器的额外样式和功能. 当浏览器升级时, 它们会自动呈现并发挥作用. “优雅降级”就是首先完整地实现整个网站,包括其中的功能和效果. 然后再为那些无法支持所有功能的浏览器增加候选方案, 使之在旧式浏览器上以某种形式降级体验却不至于完全失效.","tags":[{"name":"前端","slug":"前端","permalink":"yangyuemei.coding.me/tags/前端/"}]},{"title":"miss you","date":"2017-03-18T03:35:55.000Z","path":"2017/03/18/miss-you/","text":"思念一个人，就像中了毒一样*时间越久，中毒就越深当毒已入骨的时候，你就会有一种想要窒息的感觉但是如果你百毒不侵，那么恭喜你，你是那么的冷酷无情","tags":[{"name":"心情","slug":"心情","permalink":"yangyuemei.coding.me/tags/心情/"}]},{"title":"PHP实现简单分页过程","date":"2017-03-18T03:07:52.000Z","path":"2017/03/18/PHP实现简单分页过程/","text":"1. 连接数据库 123$link=mysql_connect(\"localhost\",\"root\",\"root\");//root为用户数据库用户名、密码mysql_select_db(\"db_name\",$link);//db_name为数据库名mysql_query(\"set names gb2312\");//设置字集 2. 得到5个值 1234567891011$perNumber=2; //每页显示的记录数$page=$_GET['page']; //获得当前的页面值$count=mysql_query(\"select count(*) from tb_article\"); $result=mysql_fetch_array($count);$totalNumber=$result[0];//获得记录总数$totalPage=ceil($totalNumber/$perNumber); //计算出总页数$startCount=($page-1)*$perNumber;//计算偏移量 3. 判断当前页数 1234//如果没有值,则赋值1if (!isset($page)) &#123; $page=1;&#125; 4. 根据上面的数值计算出开始的记录和记录数(即sql查询语句) 1$rs=mysql_query(\"select * from tb_article limit $startCount,$perNumber\"); 5. while 循环输出每页记录数 123while($row = mysql_fetch_array($rs))&#123; &lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;?php echo $row[''];?&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#125; 6. 分页条的显示​12345678910111213141516171819202122232425&lt;?php if ($page != 1) &#123; //页数不等于1?&gt; &lt;ul class=\"pagination\"&gt; &lt;!--显示上一页--&gt; &lt;li&gt;&lt;a href=\"main.php?page=&lt;?php echo $page - 1;?&gt;\"&gt;上一页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;?php &#125; for ($i=1;$i&lt;=$totalPage;$i++) &#123; //循环显示出页面 ?&gt; &lt;ul class=\"pagination\"&gt; &lt;li&gt;&lt;a href=\"main.php?page=&lt;?php echo $i;?&gt;\"&gt;&lt;?php echo $i;?&gt;&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;?php &#125; if ($page&lt;$totalPage) &#123; //如果page小于总页数,显示下一页链接 ?&gt; &lt;ul class=\"pagination\"&gt; &lt;li&gt;&lt;a href=\"main.php?page=&lt;?php echo $page + 1;?&gt;\"&gt;下一页&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;?php &#125; ?&gt; ​ 7. 到此完成简单的分页","tags":[{"name":"php","slug":"php","permalink":"yangyuemei.coding.me/tags/php/"}]},{"title":"jquery-ui-jqLoading.js实现Loading转圈圈等待效果","date":"2017-03-17T08:59:55.000Z","path":"2017/03/17/jquery-ui-jqLoading-js实现Loading转圈圈等待效果/","text":"步骤如下 引入jquery.js 和 jquery-ui-jqLoading.js 在html文件中给按钮一个id 写js脚本 以下为实现代码 index.html12345678910111213141516171819202122&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;title&gt;转圈圈效果&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=\"button\" id=\"btnOpen2\" value=\"转圈圈\" /&gt;&lt;script src=\"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"&gt;&lt;/script&gt;&lt;script src=\"jquery-ui-jqLoding.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\"&gt; $(function () &#123; $(\"#btnOpen2\").on(\"click\", function () &#123; $.fn.jqLoading(&#123; height: 100, width: 240, text: \"正在上传中，请耐心等待....\" &#125;); setTimeout(function () &#123; $.fn.jqLoading(\"destroy\"); &#125;, 3000); &#125;); &#125;)&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","tags":[{"name":"jquery特效","slug":"jquery特效","permalink":"yangyuemei.coding.me/tags/jquery特效/"}]},{"title":"jquery点击事件无效问题","date":"2017-03-17T08:46:45.000Z","path":"2017/03/17/jquery点击事件无效问题/","text":"问题:ajax异步请求数据后,动态想table中追加行，行点击事件无效 原因:动态加入到dom中的对象无法继承原有的事件，故无效 解决办法1. js方法：将td的点击事件写成函数1$(\"#table\").append(&lt;tr&gt;&lt;td onclick=\"\"&gt;&lt;/td&gt;&lt;/tr&gt;); 2. jquery方法：利用事件委派机制(适用于jquery1.9版本以下)1$(\"#table\").find(\"td\").live('click',function()&#123;&#125;); 3. jquery方法：适用于jquery1.7版本以上1$(\"#table\").find(\"td\").on('click',function()&#123;&#125;);","tags":[{"name":"jquery","slug":"jquery","permalink":"yangyuemei.coding.me/tags/jquery/"}]},{"title":"each的三种遍历方法","date":"2017-03-17T08:35:50.000Z","path":"2017/03/17/each的三种遍历方法/","text":"1. 选择器+遍历1234$('div').each(function (i)&#123; i就是索引值 this 表示获取遍历每一个dom对象&#125;); 2. 选择器+遍历12345$('div').each(function (index,domEle)&#123; index就是索引值 domEle 表示获取遍历每一个dom对象&#125;); 3. 常用的遍历方法12345$.each(d,function (index,domEle)&#123; d是要遍历的集合 index就是索引值 domEle 表示获取遍历每一个dom对&#125;);","tags":[{"name":"jquery","slug":"jquery","permalink":"yangyuemei.coding.me/tags/jquery/"}]},{"title":"git push 本地项目到远程仓库教程","date":"2017-03-17T08:16:38.000Z","path":"2017/03/17/git-push-本地项目到远程仓库教程/","text":"1. 在coding上新建项目 复制 SSH 地址2. 在本地F盘右键鼠标 Git Bash Here 进入命令模式3. git clone SSH 地址4. down文件5. 进入文件6. git status //查看状态7. git add . //添加当前文件下的所有8. git commit -m “提交留言” //commit9. git push //push 到远程仓库9. git fetch //同步最新版本10. git status //查看状态","tags":[{"name":"coding","slug":"coding","permalink":"yangyuemei.coding.me/tags/coding/"},{"name":"git","slug":"git","permalink":"yangyuemei.coding.me/tags/git/"}]},{"title":"hexo博客开启评论功能","date":"2017-03-17T07:29:07.000Z","path":"2017/03/17/hexo博客开启评论功能/","text":"主要步骤 注册多说，得到shortname 在博客根目录_config.yml 配置duoshuo_shortname: yangyuemei 在主题根目录_config.yml 配置duoshuo_shortname: yangyuemei 在artical.ejs文件中 替换一下内容 12345678910111213141516171819202122232425262728293031323334353637 &lt;% if (page.comment)&#123; %&gt;&lt;section id=\"comment\"&gt; &lt;h2 class=\"title\"&gt;请点评：&lt;/h2&gt;&lt;% if(theme.duoshuo_shortname) &#123; %&gt; &lt;!-- 多说评论框 start --&gt; &lt;div class=\"ds-thread\" data-thread-key=\"&lt;%- page.path %&gt;\" data-title=\"&lt;%- page.title %&gt;\" data-url=\"&lt;%- page.permalink %&gt;\"&gt;&lt;/div&gt; &lt;!-- 多说评论框 end --&gt; &lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt; &lt;script type=\"text/javascript\"&gt; var duoshuoQuery = &#123;short_name:\"yangyuemei\"&#125;; &lt;!-- 替换这里的duoshuo_shortname为前面注册的shortname --&gt; (function() &#123; var ds = document.createElement('script'); ds.type = 'text/javascript';ds.async = true; ds.src = (document.location.protocol == 'https:' ? 'https:' : 'http:') + '//static.duoshuo.com/embed.unstable.js'; ds.charset = 'UTF-8'; (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(ds); &#125;)(); &lt;/script&gt; &lt;!-- 多说公共JS代码 end --&gt; &lt;% &#125; else if(config.disqus_shortname) &#123; %&gt; &lt;div id=\"disqus_thread\"&gt; &lt;noscript&gt;Please enable JavaScript to view the &lt;a href=\"//disqus.com/?ref_noscript\"&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt; &lt;/div&gt; &lt;% &#125; %&gt;&lt;/section&gt;&lt;% &#125; %&gt;","tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"yangyuemei.coding.me/tags/hexo博客/"}]},{"title":"for循坏之5大算法","date":"2017-03-16T10:50:10.000Z","path":"2017/03/16/for循坏之5大排序算法/","text":"123456var sort=&#123; //初始化 init:function()&#123; var tempArr=[3,6,4,2,11,10,5]; sort.bubbleSort(empArr); &#125;, 123456//打印到控制台debug:function(str)&#123; if(window.console &amp;&amp; window.console.log)&#123; console.log(str); &#125;&#125;, 123456//数组数据交换swap:function(arr,index1,index2)&#123; var temp = arr[index1]; arr[index1] = arr[index2]; arr[index2] = temp;&#125;, 1234567891011121314//冒泡排序 bubbleSort:function(arr)&#123; // this.debug(\"冒泡排序前的数组为:\"+arr); var len = arr.length; for(var i = 0;i&lt;len-1;i++)&#123;//比较的轮数为数组的总个数-1 for(var j = 0;j&lt;len-i-1;j++)&#123;//每轮比较的次数 if(arr[j] arr[j+1] )&#123; //arr[j] arr[j+1]为升序 arr[j] &lt; arr[j+1]为降序 this.swap(arr,j,j+1); &#125; &#125; this.debug(\"第\"+(i+1)+\"轮冒泡排序后:\"+arr);&#125;this.debug(\"冒泡排序后的数组为:\"+arr);&#125;, 12345678910111213141516171819//选择排序selectionSort:function(arr)&#123; // this.debug(\"选择排序before:\"+arr); var len = arr.length; var min; for (var i = 0; i &lt; len -1; i++) &#123; min = i; // 比较最小项目和第i项之后的剩余数组项, 以寻找更小项 for (var j = i+1; j &lt; len; j++) &#123; if (arr[j] &lt; arr[min]) &#123; //arr[j] &lt; arr[j+1]为升序 arr[j] arr[j+1]为降序 min = j; this.debug(\"min--\"+min); &#125; &#125; this.swap(arr,i, min); // this.debug(\"第\"+(i+1)+\"轮选择排序后:\"+arr); &#125; this.debug(\"选择排序after:\"+arr);&#125;, 1234567891011121314151617181920212223242526272829//快速排序quickSort:function(arr)&#123; // this.debug(\"快速排序before:\"+arr); var quick = function(arr)&#123; var len = arr.length, left = [], right = [], pivot; //meCall的作用是指向拥有arguments对象的函数 // meCall = arguments.callee; //在函数内部，有两个特殊的对象：arguments 和 this。其中， arguments 的主要用途是保存函数参数， 但这个对象还有一个名叫 callee 的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。 if(len &lt; 1)&#123; return -1; &#125; pivot = arr[0];//选取数组第一个为基准进行分区 for(var i = 0;i &lt; len-1; i++)&#123; if(arr[i] &lt; pivot )&#123; left.push(arr[i]); //小于基准的放左边 放左边的那一堆又以第一个为基准 如此循环 &#125; else&#123; right.push(arr[i]);//大于基准的放右边 放右边的那一堆也以第一个为基准 如此循环 &#125; &#125; return arr.concat(left,right); // return meCall(left).concat(pivot,meCall(right)); //arrayObject.concat(arrayX,arrayX,......,arrayX) 方法用于连接两个或多个数组 arrayX参数是必需的 &#125; this.debug(\"快速排序after:\"+arr); return quick(arr);&#125;, 12345678910111213141516//插入排序 insertionSort:function(arr)&#123; // this.debug(\"插入排序before:\"+arr); var temp,inner,len = arr.length; for (var i = 0; i &lt; len-1 ; i++) &#123; temp = arr[i]; inner = i; while(inner0 &amp;&amp; arr[inner-1] = temp)&#123; arr[inner] = arr[inner-1]; --inner; &#125; arr[inner] = temp; // this.debug(\"第\"+(i+1)+\"轮插入排序后:\"+arr); &#125; this.debug(\"插入排序after:\"+arr);&#125;, 123456789101112131415161718192021222324252627//归并排序 mergeSort2:function(arr)&#123; this.debug(\"归并排序before:\"+arr); var len = arr.length; if(len 1) &#123; var index = Math.floor(len / 2); left = arr.slice(0,index); //得到下标从0~index-1的数组 right = arr.slice(index); //得到下标从index开始到末尾的数组 return this.merge2(mergeSort2(left),mergeSort2(right)); &#125; else &#123; return arr; &#125; this.debug(\"归并排序after:\"+arr);&#125;,merge2:function(left,right)&#123; //采用递归 var arr = []; while(left.length &amp;&amp; right.length) &#123; if(left[0] &lt; right[0]) &#123; arr.push(left.shift()); &#125; else &#123; arr.push(right.shift()); &#125; &#125; return arr.concat(left,right);&#125;, 12345678910111213141516171819202122232425//二分插入排序binaryInsertSort:function(arr)&#123; // this.debug(\"二分插入排序before:\"+arr); for (var i = 1; i &lt; arr.length; i++) &#123; var key = arr[i], left = 0, right = i - 1; while (left &lt;= right) &#123; // var middle = parseInt((left + right) / 2); var middle = Math.floor((left + right) / 2); if (key &lt; arr[middle]) &#123; right = middle - 1; &#125; else &#123; left = middle + 1; &#125; &#125; for (var j = i - 1; j = left; j--) &#123; arr[j + 1] = arr[j]; &#125; arr[left] = key; // this.debug(\"第\"+(i+1)+\"轮二分排序后:\"+arr); &#125; this.debug(\"二分插入排序after:\"+arr);&#125;, 12345678910111213141516171819202122232425262728293031323334353637383940//希尔排序shellSort:function(arr)&#123; // this.debug(\"希尔排序before:\"+arr); // var gaps = [5,3,1], //增量分组 第一次5个数为一组 第二次3个数为一组 第三次1个数为一组 // temp; // for(var g = 0;g &lt;gaps.length; g++)&#123; // for(var i = gaps[g];i&lt;arr.length;i++)&#123; // temp = arr[i]; // for(var j = i;j = gaps[g] &amp;&amp; arr[j-gaps[g]] temp;j -= gaps[g])&#123; // arr[j] = arr[j-gaps[g]]; // &#125; // arr[j] = temp; // &#125; // // this.debug(\"第\"+(g+1)+\"轮希尔排序后:\"+gaps); // &#125; var i,k,j,len=arr.length,gap = Math.ceil(len/2),temp; while(gap0)&#123; for (var k = 0; k &lt; gap; k++) &#123; var tagArr = []; tagArr.push(arr[k]) for (i = k+gap; i &lt; len; i=i+gap) &#123; temp = arr[i]; tagArr.push(temp); for (j=i-gap; j -1; j=j-gap) &#123; if(arr[j]temp)&#123; arr[j+gap] = arr[j]; &#125;else&#123; break; &#125; &#125; arr[j+gap] = temp; &#125; console.log(tagArr,\"gap:\"+gap);//输出当前进行插入排序的数组。 // console.log(arr);//此轮排输出序后的数组。 &#125; gap = parseInt(gap/2); &#125; this.debug(\"希尔排序after:\"+arr); return arr; &#125;, 1234567891011121314151617181920212223242526272829303132333435//A* 排序 aAtarSort:function()&#123; Open = [起始节点]; Closed = []; // while ( Open表非空 ) // &#123; // 从Open中取得一个节点X，并从OPEN表中删除。 // if (X是目标节点) // &#123; // 求得路径PATH；返回路径PATH； // &#125; // for (每一个X的子节点Y) // &#123; // if( Y不在OPEN表和CLOSE表中 ) // &#123; // 求Y的估价值；并将Y插入OPEN表中；//还没有排序 // &#125; // else // if( Y在OPEN表中 ) // &#123; // if( Y的估价值小于OPEN表的估价值 ) // 更新OPEN表中的估价值； // &#125; // else //Y在CLOSE表中 // &#123; // if( Y的估价值小于CLOSE表的估价值 ) // &#123; // 更新CLOSE表中的估价值； // 从CLOSE表中移出节点，并放入OPEN表中； // &#125; // &#125; // 将X节点插入CLOSE表中； // 按照估价值将OPEN表中的节点排序； // &#125;//end for // &#125;//end while &#125;, 123456789//线性查找linearSearch:function(arr,data)&#123; for(var i = 0;i&lt;arr.length;i++)&#123; if(arr[i] == data)&#123; return i; &#125; &#125; return -1;&#125;, 123456789101112131415161718 //二分查找 适用于已排好序的线性结构 binarySearch:function(arr,data)&#123; var lower = 0, high = arr.length - 1, mid; while(lower &lt;= high)&#123; mid = Math.floor((lower+high)/2); //Math.floor() 求一个最接近它的整数,它的值小于或等于这个浮点数 if(arr[mid] &lt; data)&#123; lower = mid + 1; &#125;else if(arr[mid] data)&#123; high = mid - 1; &#125;else&#123; return mid; &#125; return -1; &#125; &#125;,&#125; 使用： 12var tempArr = [3,6,4,2,11,10,5];sort.bubbleSort(tempArr); //冒泡","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"yangyuemei.coding.me/tags/JavaScript/"}]},{"title":"hexo博客部署到coding","date":"2017-03-16T09:01:41.000Z","path":"2017/03/16/我的第一篇博客之____hexo博客部署到coding/","text":"安装node.js 环境，用命令行工具node -v npm -v检测是否安装成功 安装git 环境，用命令行工具git --version 检测是否安装成功 git全局配置： git config --global user.name &quot;your name&quot; git config –global user.name “your email;” ` 注册coding账号并登陆,新建项目比如:myblog 切换到pages-&gt;部署来源选master分支 配置 sshkey 使用命令工具 ssh-key -t rsa -C &quot;your@com&quot; 一般在c盘打开.ssh-&gt;id_rsa.pub 复制里面全部的内容到coding找到ssh粘贴添加即可 测试ssh是否添加成功，ssh -T git@git.coding.net,出现hi ，‘你的姓名就是成功 安装hexo npm install -g hexo npm install hexo --save 看看hexo是否安装成功 hexo -v 随便在本地的一个地方新建一个文件夹hexo，进入到它的根目录，右键 Git Bash Here 进入 初始化hexo ：hexo init npm 自动安装需要的组件：npm install 生成 hexo g 启动 hexo d 若端口冲突。则hexo server -p 5000 到此为止，hexo在本地的配置已经完成了 修改 _config_yml文件 url ：“yourname.coding.me” root：/你在coding建的仓库名/ repository 即为ssh地址 ​ deploy: ​ type:git ​ repository:git@git.coding.net:yourname/yourcodingname.git ​ branch:master hexo d push到coding hexo push常用命令 hexo clean hexo g hexo d hexo s 本地预览","tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"yangyuemei.coding.me/tags/hexo博客/"}]}]